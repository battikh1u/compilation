package yal.analyse ;

import java.util.*;
import yal.arbre.* ;
import yal.arbre.expressions.* ;
import yal.arbre.instructions.* ;
import yal.arbre.expressions.operations.binaire.*;
import yal.arbre.expressions.operations.binaire.arithmetique.*;
import yal.arbre.expressions.operations.binaire.comparaison.*;
import yal.arbre.expressions.operations.binaire.logique.*;
import yal.arbre.expressions.operations.unaire.*;
import yal.exceptions.AnalyseSyntaxiqueException;
import yal.table.*;

import java_cup.runtime.*;

action code {:
             :} ;

parser code {:

    public void report_error(String message, Object info) {


        HashMap<Integer, String> lesTerminaux = new HashMap<>() ;
    
        lesTerminaux.put(new Integer(CodesLexicaux.DEBUT), "debut") ;
        lesTerminaux.put(new Integer(CodesLexicaux.FIN), "fin") ;
        lesTerminaux.put(new Integer(CodesLexicaux.POINTVIRGULE), ";") ;

        StringBuffer m = new StringBuffer() ;

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {                
                m.append("\tligne : " + (s.left + 1)) ;
                if (s.right >= 0)                    
                    m.append(" colonne : " + (s.right+1)) ;
            }
            
            if (s.value != null) {
                lesTerminaux.put(CodesLexicaux.CSTENTIERE, "" + s.value) ;
            }

            if (lesTerminaux.containsKey(new Integer(s.sym))) {
                m.append(" dernier token lu : " + lesTerminaux.get(new Integer(s.sym))) ;
            }
            else {
                // m.append(operations) ;
            }

        }
        throw new AnalyseSyntaxiqueException("" + m) ;
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
:};
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  */

terminal Symbol    PROGRAMME, DEBUT, FIN, POINTVIRGULE, ECRIRE, EGALE, PLUS, MOINS, MULT, DIV, ENTIER, LIRE, OPEREGALE, OPERNEGALE, PARGAUCHE, PARDROITE, OPET, OPOU,
                    PGQ,PPQ,NON,AFFECTATION,OPERATION,BOOLEAN;
terminal String    IDF, CSTENTIERE ;
/* Non terminals used in the grammar section.  */

non terminal ArbreAbstrait PROG, LINST, INST,CODE_PROG ;
non terminal Expression EXP ;
non terminal DECAL_LIST,DECAL_VAR;

precedence left OPOU;   //ou    // Moins important
precedence left OPET;   //et
precedence left OPEREGALE,OPERNEGALE;   // == et !=
precedence left PGQ,PPQ;    // < et >
precedence left PLUS,MOINS; // + et -
precedence left MULT,DIV;   // * et /
precedence left NON;        // non
precedence left PARGAUCHE,PARDROITE;    // ( et )    // Plus important

/* ----------------------------Grammar Section-------------------- */
 
start with PROG ;

PROG    ::=     PROGRAMME  IDF  DEBUT  CODE_PROG:cp  FIN
                {: RESULT = cp ; :}

                ;
CODE_PROG ::= DECAL_LIST LINST:li
                {: RESULT = li; :}
                |
                LINST: li
                {: RESULT = li; :}
                ;

DECAL_LIST ::= DECAL_VAR DECAL_LIST  |DECAL_VAR;


DECAL_VAR ::= ENTIER IDF:idf POINTVIRGULE
                {: Tds.getInstance().ajouter(new EntreeVar(idf),
                new SymboleEntier(),idfleft);  :}
                |
                BOOLEAN IDF:idf POINTVIRGULE
                {:Tds.getInstance().ajouter(new EntreeVar(idf),new SymboleBool(),idfleft);:}
                ;
LINST   ::=     LINST:li  INST:i
                {: ((BlocDInstructions)li).ajouter(i) ;
                   RESULT = li ; :}
        |
                INST:i
                {: BlocDInstructions b = new BlocDInstructions(ileft + 1) ;
                   b.ajouter(i) ;
                   RESULT = b ; :}
                ;

INST    ::=     ECRIRE EXP:e POINTVIRGULE

                {: RESULT = new Ecrire(e, eleft + 1) ; :}
         |

                LIRE IDF:idf POINTVIRGULE
                {:RESULT= new Lire(idfleft+1,idf);:}

                |
                IDF:idf EGALE EXP:e POINTVIRGULE
                 {: RESULT=new Affectation(idfleft+1,idf,e); :}
                 ;
EXP    ::=     CSTENTIERE:c
                {: RESULT = new ConstanteEntiere(c, cleft + 1) ; :}
                |
                IDF:idf
                {: RESULT=new Idf(idfleft+1,idf); :}
                |
                EXP:e PLUS EXP:ee
                {:RESULT=new Somme(e,ee);:}
                |
                EXP:e MOINS EXP:ee
                {:RESULT= new Soustraction(e,ee);:}
                |
                EXP:e DIV EXP:ee
                {:RESULT=new Division(e,ee);:}
                |
                EXP:e MULT EXP:ee
                {:RESULT=new Multiplication(e,ee);:}
                |
                EXP:e PGQ EXP:ee{:RESULT=new Superieur(e,ee);:}
                |
                EXP:e PPQ EXP:ee{:RESULT=new  Inferieur(e,ee);:}
                |
                EXP:e OPEREGALE EXP:ee {:RESULT=new Egal(e,ee);:}
                |
                EXP:e OPERNEGALE EXP:ee{:RESULT=new Different(e,ee);:}
                |
                MOINS EXP:e{:RESULT=new MoinsUnaire(e);:}
                |

                ;
AFFECTATION ::= IDF:idf EGALE EXP:e
                {: RESULT=new Affectation(idfleft+1,idf,e); :}
                ;
OPERATION ::= PLUS | MOINS | PPQ | PGQ | DIV | OPEREGALE | OPERNEGALE | OPET | OPOU;